
Allocating common symbols
Common symbol       size              file

biessess            0x4               bl/app2.o

Memory Configuration

Name             Origin             Length             Attributes
flash            0x08000000         0x00020000
ram              0x20000000         0x00005000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD bl/app2.o
                0x00000400                __main_stack_size__ = 0x400
                0x00000400                __process_stack_size__ = 0x400
                0x20000000                __ram_start__ = ORIGIN (ram)
                0x00005000                __ram_size__ = 0x5000
                0x20005000                __ram_end__ = (__ram_start__ + __ram_size__)
                0x00000000                . = 0x0
                0x00000000                _text = .

startup
 *(vectors)

constructors    0x08000000        0x0
                0x08000000                PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array)
                0x08000000                PROVIDE (__init_array_end, .)

destructors     0x08000000        0x0
                0x08000000                PROVIDE (__fini_array_start, .)
 *(.fini_array)
 *(SORT(.fini_array.*))
                0x08000000                PROVIDE (__fini_array_end, .)

.text           0x08010000       0xe4
 *(.text.startup.*)
 *(.text)
 .text          0x08010000       0xb4 bl/app2.o
                0x08010050                AppThread2
 *(.text.*)
 *(.rodata)
 *fill*         0x080100b4        0xc 00
 .rodata        0x080100c0       0x24 bl/app2.o
 *(.rodata.*)
 *(.glue_7t)
 .glue_7t       0x00000000        0x0 linker stubs
 *(.glue_7)
 .glue_7        0x00000000        0x0 linker stubs
 *(.gcc*)

.vfp11_veneer   0x080100e4        0x0
 .vfp11_veneer  0x00000000        0x0 linker stubs

.v4_bx          0x080100e4        0x0
 .v4_bx         0x00000000        0x0 linker stubs

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)

.ARM.exidx      0x080100e4        0x0
                0x080100e4                PROVIDE (__exidx_start, .)
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x080100e4                PROVIDE (__exidx_end, .)

.eh_frame_hdr
 *(.eh_frame_hdr)

.eh_frame
 *(.eh_frame)

.textalign      0x080100e4        0x4
                0x080100e8                . = ALIGN (0x8)
 *fill*         0x080100e4        0x4 00
                0x080100e8                _etext = .
                0x080100e8                _textdata = _etext

.stacks         0x20000000      0x800
                0x20000000                . = ALIGN (0x8)
                0x20000000                __main_stack_base__ = .
                0x20000400                . = (. + __main_stack_size__)
 *fill*         0x20000000      0x400 00
                0x20000400                . = ALIGN (0x8)
                0x20000400                __main_stack_end__ = .
                0x20000400                __process_stack_base__ = .
                0x20000400                __main_thread_stack_base__ = .
                0x20000800                . = (. + __process_stack_size__)
 *fill*         0x20000400      0x400 00
                0x20000800                . = ALIGN (0x8)
                0x20000800                __process_stack_end__ = .
                0x20000800                __main_thread_stack_end__ = .

.data           0x20000800        0xc load address 0x080100e8
                0x20000800                . = ALIGN (0x4)
                0x20000800                PROVIDE (_data, .)
 *(.data)
 .data          0x20000800        0xc bl/app2.o
                0x20000800                datastr
                0x2000080c                . = ALIGN (0x4)
 *(.data.*)
                0x2000080c                . = ALIGN (0x4)
 *(.ramtext)
                0x2000080c                . = ALIGN (0x4)
                0x2000080c                PROVIDE (_edata, .)

.bss            0x2000080c        0x4 load address 0x080100f4
                0x2000080c                . = ALIGN (0x4)
                0x2000080c                PROVIDE (_bss_start, .)
 *(.bss)
 .bss           0x2000080c        0x0 bl/app2.o
                0x2000080c                . = ALIGN (0x4)
 *(.bss.*)
                0x2000080c                . = ALIGN (0x4)
 *(COMMON)
 COMMON         0x2000080c        0x4 bl/app2.o
                0x2000080c                biessess
                0x20000810                . = ALIGN (0x4)
                0x20000810                PROVIDE (_bss_end, .)
                0x20000810                PROVIDE (end, .)
                0x20000810                _end = .
                0x20000810                __heap_base__ = _end
                0x20005000                __heap_end__ = __ram_end__
                0x080100e8                __app_base__ = _etext
                0x08020000                __app_end__ = 0x8020000
LOAD bl/os.elf
Address of section .text set to 0x8010000
OUTPUT(bl/app2.elf elf32-littlearm)

.debug_info     0x00000000      0x2ff
 .debug_info    0x00000000      0x2ff bl/app2.o

.debug_abbrev   0x00000000      0x161
 .debug_abbrev  0x00000000      0x161 bl/app2.o

.debug_loc      0x00000000       0x70
 .debug_loc     0x00000000       0x70 bl/app2.o

.debug_aranges  0x00000000       0x20
 .debug_aranges
                0x00000000       0x20 bl/app2.o

.debug_line     0x00000000      0x259
 .debug_line    0x00000000      0x259 bl/app2.o

.debug_str      0x00000000      0x18e
 .debug_str     0x00000000      0x18e bl/app2.o
                                0x1d4 (size before relaxing)

.comment        0x00000000       0x70
 .comment       0x00000000       0x70 bl/app2.o
                                 0x71 (size before relaxing)

.ARM.attributes
                0x00000000       0x33
 .ARM.attributes
                0x00000000       0x33 bl/app2.o

.debug_frame    0x00000000       0x50
 .debug_frame   0x00000000       0x50 bl/app2.o
